package com.example.api.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * See[RFC7807](https://tools.ietf.org/html/rfc7807) Use the application/problem+json or application/problem+xml media types when resturning as a response. 
 */
@ApiModel(description = "See[RFC7807](https://tools.ietf.org/html/rfc7807) Use the application/problem+json or application/problem+xml media types when resturning as a response. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-15T08:41:16.265001+01:00[Europe/Madrid]")

public class Problem   {
  @JsonProperty("type")
  private String type = "about:blank";

  @JsonProperty("title")
  private String title;

  @JsonProperty("detail")
  private String detail;

  @JsonProperty("instance")
  private String instance;

  /**
   * This defines the service identifier for the problem. * server_error: Generic internal server error. * person_not_found: The person indicated was not found. 
   */
  public enum ProblemCodeEnum {
    SERVER_ERROR("server_error"),
    
    BAD_REQUEST("bad_request"),
    
    PERSON_NOT_FOUND("person_not_found");

    private String value;

    ProblemCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProblemCodeEnum fromValue(String value) {
      for (ProblemCodeEnum b : ProblemCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("problemCode")
  private ProblemCodeEnum problemCode;

  public Problem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * A URI reference [RFC3986] that indentifies the problem type. This specifications encourages that, when dereferenced, it provides human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank'.  Consumers must use the \"type\" string as the primary identifier for the problem type;  Consumers should not automatically dereference the type URI. We should accept relative URIs for the type; this means that they must be resolved relative to the document's base URI, as per [RFC3986], Section 5.  See the RFC, section 4, for guidelines on when to define a new problem type. 
   * @return type
  */
  @ApiModelProperty(example = "https://example.com/probs/out-of-credit", value = "A URI reference [RFC3986] that indentifies the problem type. This specifications encourages that, when dereferenced, it provides human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank'.  Consumers must use the \"type\" string as the primary identifier for the problem type;  Consumers should not automatically dereference the type URI. We should accept relative URIs for the type; this means that they must be resolved relative to the document's base URI, as per [RFC3986], Section 5.  See the RFC, section 4, for guidelines on when to define a new problem type. ")


  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Problem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurance of the problem. 
   * @return title
  */
  @ApiModelProperty(value = "The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurance of the problem. ")


  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Problem detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human-readable explanation specific to this occurrence of the problem. information. 
   * @return detail
  */
  @ApiModelProperty(value = "A human-readable explanation specific to this occurrence of the problem. information. ")


  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }

  public Problem instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * A URI reference that identifies the specific occurrance of the problem.  
   * @return instance
  */
  @ApiModelProperty(value = "A URI reference that identifies the specific occurrance of the problem.  ")


  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }

  public Problem problemCode(ProblemCodeEnum problemCode) {
    this.problemCode = problemCode;
    return this;
  }

  /**
   * This defines the service identifier for the problem. * server_error: Generic internal server error. * person_not_found: The person indicated was not found. 
   * @return problemCode
  */
  @ApiModelProperty(value = "This defines the service identifier for the problem. * server_error: Generic internal server error. * person_not_found: The person indicated was not found. ")


  public ProblemCodeEnum getProblemCode() {
    return problemCode;
  }

  public void setProblemCode(ProblemCodeEnum problemCode) {
    this.problemCode = problemCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Problem problem = (Problem) o;
    return Objects.equals(this.type, problem.type) &&
        Objects.equals(this.title, problem.title) &&
        Objects.equals(this.detail, problem.detail) &&
        Objects.equals(this.instance, problem.instance) &&
        Objects.equals(this.problemCode, problem.problemCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, title, detail, instance, problemCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Problem {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    problemCode: ").append(toIndentedString(problemCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

