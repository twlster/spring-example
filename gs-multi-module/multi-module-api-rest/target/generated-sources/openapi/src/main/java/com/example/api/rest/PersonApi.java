/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api.rest;

import com.example.api.model.Person;
import com.example.api.model.Problem;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-15T08:41:16.265001+01:00[Europe/Madrid]")

@Validated
@Api(value = "person", description = "the person API")
public interface PersonApi {

    default PersonApiDelegate getDelegate() {
        return new PersonApiDelegate() {};
    }

    /**
     * GET /person : Get person
     *
     * @return successful operation (status code 200)
     *         or a problem occured. (status code 200)
     */
    @ApiOperation(value = "Get person", nickname = "getPerson", notes = "", response = Person.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Person.class),
        @ApiResponse(code = 200, message = "a problem occured.", response = Problem.class) })
    @RequestMapping(value = "/person",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Person> getPerson() {
        return getDelegate().getPerson();
    }


    /**
     * POST /person : posts a person
     *
     * @param person the person to insert (required)
     * @return Person created. Successful operation. (status code 201)
     *         or a problem occured. (status code 200)
     */
    @ApiOperation(value = "posts a person", nickname = "postPerson", notes = "", response = Person.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "person", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Person created. Successful operation.", response = Person.class),
        @ApiResponse(code = 200, message = "a problem occured.", response = Problem.class) })
    @RequestMapping(value = "/person",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Person> postPerson(@ApiParam(value = "the person to insert" ,required=true )  @Valid @RequestBody Person person) {
        return getDelegate().postPerson(person);
    }

}
